<!DOCTYPE html>
<html>

<head>
    <title>CATS-
        Portfolio Item Health Summary-
            0.0.1
    </title>
    <!--  (c) 2017 CA Technologies.  All Rights Reserved. -->
    <!--  Build Date: Tue Feb 13 2018 18:24:09 GMT+0000 (UTC) -->

    <script type="text/javascript">
        var APP_BUILD_DATE = "Tue Feb 13 2018 18:24:09 GMT+0000 (UTC)";
        var ARTIFACT = "";
        var BUILDER = "ec2-user";
        var CHECKSUM = "13846855858";
    </script>

    <script type="text/javascript" src="https://us1.rallydev.com/apps/2.1/sdk-debug.js"></script>
    <!-- our highcharts (needed so that we can add patterns)
    <script type="text/javascript" src="/apps/2.1/lib/analytics/analytics-all.js"></script>
    -->


    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',

    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,

    /**
     *
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",

    defaults: { padding: 5, margin: 5 },

    closable: true,

    draggable: true,

    autoShow: true,

    width: 350,

    informationalConfig: null,

    showLog: false,
    logger: null,

    items: [
        {xtype:'container', itemId:'information' },
        {xtype:'container', itemId:'button_box'}
    ],

    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },

    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/var BUILDER  = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.

        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }

        return chk;
    },

    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        var me = this;

        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    var stored_checksum = me._generateChecksum(text);
                    if ( CHECKSUM !== stored_checksum ) {
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });

        return deferred.promise;
    },

    _addToContainer: function(container){
        var config = Ext.apply({
            xtype:'container',
            height: 200,
            overflowY: true
        }, this.informationalConfig);

        container.add(config);
    },

    afterRender: function() {
        var app = Rally.getApp();

        if ( !Ext.isEmpty( this.informationalConfig ) ) {
            var container = this.down('#information');
            this._addToContainer(container);
        }

        if ( this.showLog && this.logger ) {
            this.down('#button_box').add({
                xtype:'rallybutton',
                text:'Show Log',
                listeners: {
                    scope: this,
                    click: function() {
                        this.logger.displayLog();
                    }
                }
            });
        }

        if (! app.isExternal() ) {
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            dock: 'bottom',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                dock: 'bottom',
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },

    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml,
                dock: 'bottom'
            });
        }

        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            dock:'bottom',
            html:"This app was created by the CA AC Technical Services Team."
        });

        if ( APP_BUILD_DATE ) {
            var build_html = Ext.String.format("Built on: {0} <br/>Built by: {1}",
                APP_BUILD_DATE,
                BUILDER);

            if ( ARTIFACT ) {
                build_html = build_html + "<br/>Source artifact: " + ARTIFACT;
            }

            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                dock: 'top',
                html: build_html
            });
        }
    }
});

/*
 * originally written for when we supported older versions of IE that wouldn't
 * deal with console.log.
 *
 * Now allows for saving log.
 */
Ext.define('CArABU.technicalservices.Logger',{

    saveForLater: false,
    saveLines: 100,
    logArray: [],

    constructor: function(config){
        Ext.apply(this,config);
    },

    setSaveForLater: function(saveme){
        this.saveForLater = saveme;
    },

    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";

        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        if ( this.saveForLater ) {
            if ( !this.logArray) {
                this.logArray = [];
            }
            this.logArray.push(output_args.join(' '));

            if ( this.logArray.length > this.saveLines ) {
                this.logArray.shift();
            }
        }

        window.console && console.log.apply(console,output_args);
    },

    getLogText: function() {
        if ( ! this.logArray || this.logArray.length === 0 ) { return "-- no log --"; }
        return this.logArray.join('<br/>');
    } ,

    displayLog: function() {
        var text = this.getLogText();

        this.popup = Ext.create('Rally.ui.dialog.Dialog', {
            width      : Ext.getBody().getWidth() - 20,
            height     : Ext.getBody().getHeight() - 20,
            closable   : true,
            title      : 'Log',
            autoShow   : true,
            layout     : 'border',
            defaults   : {
                layout : 'fit',
                width  : '50%',
                border : false
            },
            items: [{
                region : 'center',
                xtype: 'container',
                html: text,
                autoScroll: true
            }]
        });
    }
});

Ext.define('TSUtilities', {

    singleton: true,

    loadWsapiRecords: function(config){
        var deferred = Ext.create('Deft.Deferred');
        var default_config = {
            model: 'Defect',
            fetch: ['ObjectID']
        };
        Ext.create('Rally.data.wsapi.Store', Ext.Object.merge(default_config,config)).load({
            callback : function(records, operation, successful) {
                if (successful){
                    deferred.resolve(records);
                } else {
                    console.error("Failed: ", operation);
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    },

    loadAStoreWithAPromise: function(model_name, model_fields){
        var deferred = Ext.create('Deft.Deferred');

        Ext.create('Rally.data.wsapi.Store', {
            model: model_name,
            fetch: model_fields
        }).load({
            callback : function(records, operation, successful) {
                if (successful){
                    deferred.resolve(this);
                } else {
                    console.error("Failed: ", operation);
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    }
});

/* global Ext _ */
Ext.define('tsMetricsUtils', function(MetricsUtils) {
    return {
        statics: {
            getMedian: getMedian,
            getDaysElapsed: getDaysElapsed
            //toPercentString: toPercentString
        }
    }

    function getMedian(values) {
        var sorted = _.unique(_.sortBy(values));
        var count = sorted.length;
        var result = undefined;
        if (count > 0) {
            if ((count % 2) == 0) {
                // Even number of items, return the average of the middle two values
                result = (sorted[count / 2 - 1] + sorted[count / 2]) / 2;
            }
            else {
                result = sorted[Math.floor(count / 2)];
            }
        }

        return Math.ceil(result); // round up to whole days
    }

    function getDaysElapsed(startDateStr, endDateStr) {
        var startDate = Ext.Date.parse(startDateStr, 'c', true);
        var endDate = Ext.Date.parse(endDateStr, 'c', true);

        // TODO (tj) Assuming doesn't take 1 year or more to complete
        var result = undefined;
        var startDay = Ext.Date.getDayOfYear(startDate);
        var endDay = Ext.Date.getDayOfYear(endDate);
        if (endDay >= startDay) {
            // The simple case, completed in the same year
            result = endDay - startDay;
        }
        else {
            // Crossed a year boundary
            var daysInStartYear = Ext.Date.isLeapYear(startDate) ? 365 : 364;
            result = endDay + daysInStartYear - startDay;
        }
        return result;
    }

    /*
    function toPercentString(value) {
        if (isNaN(value)) {
            value = "Unknown"
        }
        else {
            value = ((value - 1) * 100).toFixed(0)
        }

        if (value > 0) {
            value = "+" + value;
        }

        return value + "%"
    }
    */
});

/* global Ext */
Ext.define('com.ca.TechnicalServices.SummaryRow', {
    extend: 'Ext.data.Model',
    fields: [
        { name: 'FormattedID', type: 'string' },
        { name: 'Name', type: 'string' },
        { name: 'PercentCompleteByStoryPoints', type: 'int' },
        { name: 'PercentCompleteByStoryCount', type: 'int' },
        { name: 'RedYellowGreen', type: 'string' },
        { name: 'CycleTimeMedian', type: 'int' },
        { name: 'CycleTimeTrend', type: 'string' },
        { name: 'ThroughputMedian', type: 'float' },
        { name: 'ThroughputTrend', type: 'string' },
        { name: 'WipRatio', type: 'float' }
    ]
});

/* global Ext _ com tsMetricsUtils Rally */
// TODO (tj) make level configurable
// TODO (tj) if at theme level are metric still a Feature Level?
Ext.define("com.ca.TechnicalServices.Stores", function(Stores) {
    var selectedPortfolioItem;
    var parentNameMap = {};
    return {
        require: [
            'tsMetricsUtils'
        ],
        statics: {
            PORTFOLIO_ITEM_TYPE: 'PortfolioItem/Feature',
            PORTFOLIO_ITEM_STORE_ID: 'PORTFOLIO_ITEM_STORE_ID',
            GRID_STORE_ID: 'GRID_STORE_ID',
            PER_PROJECT_WIP_LIMIT: 3,
            CYCLE_TIME_TREND_DAYS: 30,
            MGMT_PROJECT_NAMES_SETTING: 'MGMT_PROJECT_NAMES_SETTING',
            ROW_PORTFOLIO_ITEM_TYPE: 'PortfolioItem/Epic',
            ROW_METRICS_PORTFOLIO_ITEM_TYPE: 'PortfolioItem/Feature',
        },
        init: init,
        onPortfolioItemChange: onPortfolioItemChange
    }

    /***
     * Private methods
     ***/
    function loadPortfolioItemStore() {
        if (selectedPortfolioItem) {

            var filters = Rally.data.wsapi.Filter.and([{
                    property: 'Parent',
                    operator: '!=',
                    value: null
                },
                {
                    property: 'Parent.Parent',
                    value: selectedPortfolioItem
                }
            ]);

            var mgmtProjectNamesSetting = Rally.getApp().getSetting(Stores.MGMT_PROJECT_NAMES_SETTING);
            if (mgmtProjectNamesSetting) {
                var projectNameQueries = mgmtProjectNamesSetting.split('\n').map(function(value) {
                    return {
                        property: 'Project.Name',
                        operator: '!=',
                        value: value
                    }
                });
                if (projectNameQueries.length) {
                    var projectNameFilters = Rally.data.wsapi.Filter.or(projectNameQueries);
                    filters.and(projectNameFilters)
                }
            }

            Ext.data.StoreManager.lookup(Stores.PORTFOLIO_ITEM_STORE_ID).load({
                filters: filters
            });
        }
    }

    //function onPortfolioItemStoreLoad(store, records, successful) {
    function onPortfolioItemStoreLoad(store) {

        // Store contains mix of Epics and Features, grouped by parent.
        // Build a map of Epic ObjectId to Name and filter it out of the
        // metric data.

        var metricsGroups = _.filter(store.getGroups(), function(group) {
            var result = false; // By default, don't include a group
            if (group.children && group.children.length) {
                var typeName = group.children[0].get("PortfolioItemTypeName");
                if (typeName == Stores.ROW_PORTFOLIO_ITEM_TYPE) {
                    _.forEach(group.children, function(item) {
                        parentNameMap[item.get('ObjectID')] = item.get('Name');
                    });
                }
                if (typeName == Stores.ROW_METRICS_PORTFOLIO_ITEM_TYPE) {
                    result = true;
                }
            }

            return result;
        });

        var data = _.map(metricsGroups, function(group) {
            var metrics = reduceGroup(group);
            var allCycleTimesMedianDays = tsMetricsUtils.getMedian(metrics.allCycleTimes);
            var priorPeriodCycleTimesMedianDays = tsMetricsUtils.getMedian(metrics.priorPeriodCycleTimes);
            var currentPeriodCycleTimesMedianDays = tsMetricsUtils.getMedian(metrics.currentPeriodCycleTimes);
            var cycleTimesTrend = (currentPeriodCycleTimesMedianDays - priorPeriodCycleTimesMedianDays).toFixed(0);
            var throughputTrend = (1 / currentPeriodCycleTimesMedianDays - 1 / priorPeriodCycleTimesMedianDays).toFixed(4);

            var uniqueProjectCount = _.unique(metrics.projects, '_ref').length;

            return Ext.create('com.ca.TechnicalServices.SummaryRow', {
                FormattedID: group.name.FormattedID,
                Name: parentNameMap[group.name],
                PercentCompleteByStoryPoints: metrics.acceptedLeafStoryPlanEstimateTotal / (metrics.leafStoryPlanEstimateTotal || 1) * 100,
                PercentCompleteByStoryCount: metrics.acceptedLeafStoryCount / (metrics.leafStoryCount || 1) * 100,
                RedYellowGreen: getRedYellowGreen(group),
                CycleTimeMedian: allCycleTimesMedianDays,
                CycleTimeTrend: cycleTimesTrend,
                ThroughputMedian: (1 / allCycleTimesMedianDays).toFixed(4),
                ThroughputTrend: throughputTrend,
                WipRatio: (metrics.workInProgress / (uniqueProjectCount * Stores.PER_PROJECT_WIP_LIMIT)).toFixed(2)
            });
        });
        Ext.data.StoreManager.lookup(Stores.GRID_STORE_ID).loadData(data);
    }

    function reduceGroup(group) {
        var today = new Date();
        var priorPeriodStart = Ext.Date.subtract(today, Ext.Date.DAY, Stores.CYCLE_TIME_TREND_DAYS * 2);
        var currentPeriodStart = Ext.Date.subtract(today, Ext.Date.DAY, Stores.CYCLE_TIME_TREND_DAYS);
        var priorPeriodEnd = Ext.Date.subtract(currentPeriodStart, Ext.Date.DAY, 1);
        var currentPeriodEnd = Ext.Date.subtract(today, Ext.Date.DAY, 1);
        var result = _.reduce(group.children, function(accumulator, value) {

            // Percent complete by story points
            accumulator.acceptedLeafStoryPlanEstimateTotal += value.get('AcceptedLeafStoryPlanEstimateTotal') || 0;
            accumulator.leafStoryPlanEstimateTotal += value.get('LeafStoryPlanEstimateTotal') || 0;

            // Percent complete by story count
            accumulator.acceptedLeafStoryCount += value.get('AcceptedLeafStoryCount') || 0;
            accumulator.leafStoryCount += value.get('LeafStoryCount') || 0;

            // Cycle time and trends
            var actualStartDate = value.raw.ActualStartDate ? Ext.Date.parse(value.raw.ActualStartDate, 'c') : null;
            var actualEndDate = value.raw.ActualEndDate ? Ext.Date.parse(value.raw.ActualEndDate, 'c') : null;

            if (actualStartDate && actualEndDate) {
                var days = tsMetricsUtils.getDaysElapsed(actualStartDate, actualEndDate);
                accumulator.allCycleTimes.push(days);

                if (Ext.Date.between(actualEndDate, priorPeriodStart, priorPeriodEnd)) {
                    accumulator.priorPeriodCycleTimes.push(days);
                }
                else if (Ext.Date.between(actualEndDate, currentPeriodStart, currentPeriodEnd)) {
                    accumulator.currentPeriodCycleTimes.push(days);
                }
            }

            // WIP
            if (actualStartDate && !actualEndDate) {
                accumulator.workInProgress++;
            }

            accumulator.projects.push(value.get('Project'))

            return accumulator;
        }, {
            acceptedLeafStoryPlanEstimateTotal: 0,
            leafStoryPlanEstimateTotal: 0,
            acceptedLeafStoryCount: 0,
            leafStoryCount: 0,
            allCycleTimes: [],
            priorPeriodCycleTimes: [],
            currentPeriodCycleTimes: [],
            workInProgress: 0,
            projects: [],
        });
        return result;
    }


    function getRedYellowGreen(group) {
        // TODO (tj) See https://help.rallydev.com/track-portfolio-items#coloralg
        return "TODO"
    }

    /***
     * Public methods
     ***/
    function init() {
        // Store to load Feature item data
        Ext.create('Rally.data.wsapi.Store', {
            storeId: Stores.PORTFOLIO_ITEM_STORE_ID,
            model: Stores.PORTFOLIO_ITEM_TYPE,
            listeners: {
                scope: this
            },
            fetch: [
                'FormattedID',
                'Name',
                'Parent',
                'LeafStoryCount',
                'AcceptedLeafStoryCount',
                'LeafStoryPlanEstimateTotal',
                'AcceptedLeafStoryPlanEstimateTotal',
                'PercentCompleteByStoryCount',
                'PercentCompleteByStoryPlanEstimate',
                'ActualStartDate',
                'ActualEndDate',
                'Project'
            ],
            groupField: 'Parent',
            listeners: {
                scope: this,
                load: onPortfolioItemStoreLoad
            }
        });

        // Store to contain row data computed from portfolio items
        Ext.create('Rally.data.custom.Store', {
            storeId: Stores.GRID_STORE_ID,
            model: 'com.ca.TechnicalServices.SummaryRow'
        });
    }

    function onPortfolioItemChange(newValue) {
        selectedPortfolioItem = newValue;
        return getFeaturesFromPis([selectedPortfolioItem]).then(onPortfolioItemStoreLoad)
        //loadPortfolioItemStore();
    }

    function getFeaturesFromPis(portfolioItems) {
        var deferred = Ext.create('Deft.Deferred');
        var portfolioOids = _.map(portfolioItems, function(item) {
            return item.get('ObjectID');
        });

        if (portfolioOids.length < 1) {
            deferred.reject("No portfolio items set");
        }
        else {
            // User has selected individual portfolio items. Filter out features
            // not in those PIs
            var filters = [{
                    property: '_TypeHierarchy',
                    operator: 'in',
                    value: [Stores.ROW_PORTFOLIO_ITEM_TYPE, Stores.ROW_METRICS_PORTFOLIO_ITEM_TYPE]
                },
                {
                    property: '__At',
                    value: 'current'
                },
                {
                    property: '_ItemHierarchy',
                    operator: 'in',
                    value: portfolioOids
                }
            ];

            Ext.create('Rally.data.lookback.SnapshotStore', {
                autoLoad: true,
                limit: Infinity,
                filters: filters,
                fetch: [
                    'FormattedID',
                    'Name',
                    'Parent',
                    'LeafStoryCount',
                    'AcceptedLeafStoryCount',
                    'LeafStoryPlanEstimateTotal',
                    'AcceptedLeafStoryPlanEstimateTotal',
                    'PercentCompleteByStoryCount',
                    'PercentCompleteByStoryPlanEstimate',
                    'ActualStartDate',
                    'ActualEndDate',
                    'Project',
                    'PortfolioItemType',
                    'PortfolioItemTypeName'
                ],
                groupField: 'Parent',
                listeners: {
                    load: function(store, data, success) {
                        if (!success || data.length < 1) {
                            deferred.reject("Unable to load feature IDs " + portfolioOids);
                        }
                        else {
                            deferred.resolve(store);
                        }
                    }
                }
            });
        }
        return deferred.getPromise();
    }

});

/* global Ext CArABU _ com */
Ext.define("com.ca.TechnicalServices.PortfolioItemHealthSummary", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new CArABU.technicalservices.Logger(),
    items: [{
            xtype: 'form',
            itemId: 'controlsArea',
        },
        {
            xtype: 'container',
            itemId: 'gridArea'
        },
    ],

    integrationHeaders: {
        name: "com.ca.TechnicalServices.PortfolioItemHealthSummary"
    },

    launch: function() {
        var me = this;
        this.logger.setSaveForLater(this.getSetting('saveLog'));
        this.stores = new com.ca.TechnicalServices.Stores();
        this.stores.init();
        this.down('#controlsArea').add({
            xtype: 'rallysearchcombobox',
            storeConfig: {
                model: 'portfolioitem/initiative',
                autoLoad: true
            },
            fieldLabel: "Initiative",
            listeners: {
                scope: this,
                change: function(control, newValue) {
                    this.stores.onPortfolioItemChange(control.getRecord());
                }
            }
        });
        this.down('#gridArea').add({
            xtype: 'rallygrid',
            store: Ext.data.StoreManager.lookup(com.ca.TechnicalServices.Stores.GRID_STORE_ID),
            columnCfgs: [{
                    text: 'Name',
                    dataIndex: 'Name',
                },
                {
                    text: '% Complete (Points)',
                    dataIndex: 'PercentCompleteByStoryPoints'
                },
                {
                    text: '% Complete (Count)',
                    dataIndex: 'PercentCompleteByStoryCount'
                },
                {
                    text: 'RYG',
                    dataIndex: 'RedYellowGreen'
                },
                {
                    text: 'Cycle Time (Median Days)',
                    dataIndex: 'CycleTimeMedian'
                },
                {
                    text: 'Cycle Time (Trend)',
                    dataIndex: 'CycleTimeTrend'
                },
                {
                    text: 'Throughput (Median Days)',
                    dataIndex: 'ThroughputMedian'
                },
                {
                    text: 'Throughput (Trend)',
                    dataIndex: 'ThroughputTrend'
                },
                {
                    text: 'WIP Ratio',
                    dataIndex: 'WipRatio'
                }
            ]
        });
    },

    getSettingsFields: function() {
        var check_box_margins = '5 0 5 0';
        return [{
                name: 'saveLog',
                xtype: 'rallycheckboxfield',
                boxLabelAlign: 'after',
                fieldLabel: '',
                margin: check_box_margins,
                boxLabel: 'Save Logging<br/><span style="color:#999999;"><i>Save last 100 lines of log for debugging.</i></span>'

            },
            {
                name: com.ca.TechnicalServices.Stores.MGMT_PROJECT_NAMES_SETTING,
                xtype: 'textarea',
                fieldLabel: 'Management Projects to Exclude',
            }
        ];
    },

    getOptions: function() {
        var options = [{
            text: 'About...',
            handler: this._launchInfo,
            scope: this
        }];

        return options;
    },

    _launchInfo: function() {
        if (this.about_dialog) { this.about_dialog.destroy(); }

        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink', {
            showLog: this.getSetting('saveLog'),
            logger: this.logger
        });
    }

});


            Rally.launchApp('com.ca.TechnicalServices.PortfolioItemHealthSummary', {
                name: 'Portfolio Item Health Summary'
            });
        });
    </script>

    <style type="text/css">
        
.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
    </style>

</head>

<body></body>

</html>